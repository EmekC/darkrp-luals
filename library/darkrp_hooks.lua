---@meta

--- The hook library allows you to add hooks called by the game engine, allowing multiple scripts to modify game function.
hook = {}

---![(Shared and Menu)](https://github.com/user-attachments/assets/8f5230ff-38f7-493b-b9fc-cc70ffd5b3f4) Registers a function (or "callback") with the [Hook](https://wiki.facepunch.com/gmod/Hook) system so that it will be called automatically whenever a specific event (or "hook") occurs.
---
---[View wiki](https://wiki.facepunch.com/gmod/hook.Add)
---@param eventName string The event to hook on to. This can be any GM_Hooks hook, gameevent after using gameevent.Listen, or custom hook run with hook.Call or hook.Run.
---@param identifier any The unique identifier, usually a string. This can be used elsewhere in the code to replace or remove the hook. The identifier **should** be unique so that you do not accidentally override some other mods hook, unless that's what you are trying to do.
---
--- The identifier can be either a string, or a table/object with an IsValid function defined such as an Entity or Panel. numbers and booleans, for example, are not allowed.
---
--- If the identifier is a table/object, it will be inserted in front of the other arguments in the callback and the hook will be called as long as it's valid. However, if IsValid( identifier ) returns false when **any** eventName hook is called, the hook will be removed.
---@param func function The function to be called, arguments given to it depend on the identifier used.
---
--- 	Returning any value besides nil from the hook's function will stop other hooks of the same event down the loop from being executed. Only return a value when absolutely necessary and when you know what you are doing.
---
--- 	It will also prevent the associated `GM:*` hook from being called on the gamemode.
---
--- 	It WILL break other addons.
---@overload fun(eventName: "addLaw", identifier: any, func: fun(index: number, law: string, player: Player))
---@overload fun(eventName: "agendaUpdated", identifier: any, func: fun(ply: Player, agenda: table, text: string): (string))
---@overload fun(eventName: "calculateNPCKillPay", identifier: any, func: fun(ply: Player, npc: Entity): (number))
---@overload fun(eventName: "canAdvert", identifier: any, func: fun(player: Player, arguments: table): (boolean, string))
---@overload fun(eventName: "canArrest", identifier: any, func: fun(arrester: Player, arrestee: Player): (boolean, string))
---@overload fun(eventName: "canBuyAmmo", identifier: any, func: fun(ply: Player, ammoTable: table): (boolean, boolean, string, number))
---@overload fun(eventName: "canBuyCustomEntity", identifier: any, func: fun(ply: Player, entTable: table): (boolean, boolean, string, number))
---@overload fun(eventName: "canBuyPistol", identifier: any, func: fun(ply: Player, shipmentTable: table): (boolean, boolean, string, number))
---@overload fun(eventName: "canBuyShipment", identifier: any, func: fun(ply: Player, shipmentTable: table): (boolean, boolean, string, number))
---@overload fun(eventName: "canBuyVehicle", identifier: any, func: fun(ply: Player, vehicleTable: table): (boolean, boolean, string, number))
---@overload fun(eventName: "canChangeJob", identifier: any, func: fun(ply: Player, job: string): (boolean, string, string))
---@overload fun(eventName: "CanChangeRPName", identifier: any, func: fun(ply: Player, name: string): (boolean, string))
---@overload fun(eventName: "canChatCommand", identifier: any, func: fun(ply: Player, command: string, arguments: string): (boolean))
---@overload fun(eventName: "canChatSound", identifier: any, func: fun(ply: Player, chatPhrase: string, chatText: string): (boolean))
---@overload fun(eventName: "canDarkRPUse", identifier: any, func: fun(ply: Player, entity: Entity, caller: Player): (boolean, string))
---@overload fun(eventName: "canDemote", identifier: any, func: fun(ply: Player, target: Player, reason: string): (boolean, string))
---@overload fun(eventName: "canDoorRam", identifier: any, func: fun(ply: Player, trace: table, ent: Entity): (boolean))
---@overload fun(eventName: "canDropPocketItem", identifier: any, func: fun(ply: Player, item: table, serialized: table): (boolean, string))
---@overload fun(eventName: "canDropWeapon", identifier: any, func: fun(ply: Player, weapon: Weapon): (boolean))
---@overload fun(eventName: "canEarnNPCKillPay", identifier: any, func: fun(ply: Player, npc: Entity): (boolean))
---@overload fun(eventName: "canEditLaws", identifier: any, func: fun(player: Player, action: string, arguments: table): (boolean, string))
---@overload fun(eventName: "canGoAFK", identifier: any, func: fun(ply: Player, afk: boolean): (boolean))
---@overload fun(eventName: "canKeysLock", identifier: any, func: fun(ply: Player, door: Entity): (boolean))
---@overload fun(eventName: "canKeysUnlock", identifier: any, func: fun(ply: Player, door: Entity): (boolean))
---@overload fun(eventName: "canLockpick", identifier: any, func: fun(ply: Player, ent: Entity, trace: table): (boolean))
---@overload fun(eventName: "canPocket", identifier: any, func: fun(ply: Player, item: Entity): (boolean, string))
---@overload fun(eventName: "canPropertyTax", identifier: any, func: fun(ply: Player, tax: number): (boolean, number))
---@overload fun(eventName: "canRequestHit", identifier: any, func: fun(hitman: Player, customer: Player, target: Player, price: number): (boolean, string, number))
---@overload fun(eventName: "canRequestWarrant", identifier: any, func: fun(target: Player, actor: Player, reason: Player): (boolean, string))
---@overload fun(eventName: "canSeeLogMessage", identifier: any, func: fun(ply: Player, message: string, color: Color): (boolean))
---@overload fun(eventName: "canSleep", identifier: any, func: fun(player: Player, force: boolean): (boolean, string))
---@overload fun(eventName: "canStartVote", identifier: any, func: fun(vote: table): (boolean, boolean, string))
---@overload fun(eventName: "canTax", identifier: any, func: fun(ply: Player, tax: number): (boolean, number))
---@overload fun(eventName: "canTaxEntity", identifier: any, func: fun(ply: Player, ent: Entity): (boolean))
---@overload fun(eventName: "canUnarrest", identifier: any, func: fun(unarrester: Player, unarrestee: Player): (boolean, string))
---@overload fun(eventName: "canUnwant", identifier: any, func: fun(target: Player, actor: Player): (boolean, string))
---@overload fun(eventName: "canVote", identifier: any, func: fun(ply: Player, vote: table): (boolean, string))
---@overload fun(eventName: "canWanted", identifier: any, func: fun(target: Player, actor: Player, reason: Player): (boolean, string))
---@overload fun(eventName: "chatHideRecipient", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "DarkRPDBInitialized", identifier: any, func: fun())
---@overload fun(eventName: "DarkRPFinishedLoading", identifier: any, func: fun())
---@overload fun(eventName: "DarkRPLogPrinted", identifier: any, func: fun(text: string, colour: Color))
---@overload fun(eventName: "DarkRPStartedLoading", identifier: any, func: fun())
---@overload fun(eventName: "DarkRPVarChanged", identifier: any, func: fun(ply: Player, varname: string, oldValue: any, newvalue: any))
---@overload fun(eventName: "demoteTeam", identifier: any, func: fun(target: Player): (number))
---@overload fun(eventName: "F4MenuTabs", identifier: any, func: fun())
---@overload fun(eventName: "getDoorCost", identifier: any, func: fun(ply: Player, ent: Entity): (number))
---@overload fun(eventName: "getVehicleCost", identifier: any, func: fun(ply: Player, ent: Entity): (number))
---@overload fun(eventName: "getVoteResults", identifier: any, func: fun(vote: table, yea: number, nay: number): (number))
---@overload fun(eventName: "hideSellDoorMessage", identifier: any, func: fun(ply: Player, ent: Player): (boolean))
---@overload fun(eventName: "HUDDrawDoorData", identifier: any, func: fun(ent: Entity))
---@overload fun(eventName: "hungerUpdate", identifier: any, func: fun(ply: Player, energy: number): (boolean))
---@overload fun(eventName: "loadCustomDarkRPItems", identifier: any, func: fun())
---@overload fun(eventName: "lockdownEnded", identifier: any, func: fun(actor: Player))
---@overload fun(eventName: "lockdownStarted", identifier: any, func: fun(actor: Player))
---@overload fun(eventName: "lockpickStarted", identifier: any, func: fun(ply: Player, ent: Entity, trace: table))
---@overload fun(eventName: "lockpickTime", identifier: any, func: fun(ply: Player, ent: Entity): (number))
---@overload fun(eventName: "lotteryEnded", identifier: any, func: fun(participants: table, chosen: Player, amount: number))
---@overload fun(eventName: "lotteryStarted", identifier: any, func: fun(ply: Player, price: number))
---@overload fun(eventName: "moneyPrinterCatchFire", identifier: any, func: fun(moneyprinter: Entity): (boolean))
---@overload fun(eventName: "moneyPrinterPrinted", identifier: any, func: fun(moneyprinter: Entity, moneybag: Entity))
---@overload fun(eventName: "moneyPrinterPrintMoney", identifier: any, func: fun(moneyprinter: Entity, amount: number): (boolean, number))
---@overload fun(eventName: "onAgendaRemoved", identifier: any, func: fun(name: string, itemTable: table))
---@overload fun(eventName: "onAllowedToOwnAdded", identifier: any, func: fun(ply: Player, ent: Entity, target: Player): (boolean))
---@overload fun(eventName: "onAllowedToOwnRemoved", identifier: any, func: fun(ply: Player, ent: Entity, target: Player): (boolean))
---@overload fun(eventName: "onAmmoTypeRemoved", identifier: any, func: fun(num: number, itemTable: table))
---@overload fun(eventName: "onChatCommand", identifier: any, func: fun(ply: Player, command: string, arguments: string, return: table): (string, function))
---@overload fun(eventName: "onChatSound", identifier: any, func: fun(ply: Player, chatPhrase: string, chatText: string))
---@overload fun(eventName: "onDarkRPWeaponDropped", identifier: any, func: fun(ply: Player, spawned_weapon: Entity, original_weapon: Weapon))
---@overload fun(eventName: "onDemoteGroupRemoved", identifier: any, func: fun(name: string, itemTable: table))
---@overload fun(eventName: "onDoorRamUsed", identifier: any, func: fun(success: boolean, ply: Player, trace: table))
---@overload fun(eventName: "onDrawSpawnedWeapon", identifier: any, func: fun(weapon: Player): (any))
---@overload fun(eventName: "onEntityGroupRemoved", identifier: any, func: fun(name: string, itemTable: table))
---@overload fun(eventName: "onEntityRemoved", identifier: any, func: fun(num: number, itemTable: table))
---@overload fun(eventName: "onFoodItemRemoved", identifier: any, func: fun(num: number, itemTable: table))
---@overload fun(eventName: "onGroupChatRemoved", identifier: any, func: fun(num: number, itemTable: table))
---@overload fun(eventName: "onHitAccepted", identifier: any, func: fun(hitman: Player, target: Player, customer: Player))
---@overload fun(eventName: "onHitCompleted", identifier: any, func: fun(hitman: Player, target: Player, customer: Player))
---@overload fun(eventName: "onHitFailed", identifier: any, func: fun(hitman: Player, target: Player, reason: string))
---@overload fun(eventName: "onJobRemoved", identifier: any, func: fun(num: number, jobbtable: table))
---@overload fun(eventName: "onKeysLocked", identifier: any, func: fun(ent: Entity))
---@overload fun(eventName: "onKeysMenuOpened", identifier: any, func: fun(ent: Entity, Frame: Panel))
---@overload fun(eventName: "onKeysUnlocked", identifier: any, func: fun(ent: Entity))
---@overload fun(eventName: "onLockpickCompleted", identifier: any, func: fun(ply: Player, success: boolean, ent: Entity): (boolean))
---@overload fun(eventName: "onNotify", identifier: any, func: fun(plys: table, msgType: number, duration: number, message: string): (boolean))
---@overload fun(eventName: "onPaidTax", identifier: any, func: fun(ply: Player, tax: number, wallet: number))
---@overload fun(eventName: "onPlayerChangedName", identifier: any, func: fun(ply: Player, oldName: string, newName: string))
---@overload fun(eventName: "OnPlayerChangedTeam", identifier: any, func: fun(ply: Player, before: number, after: number))
---@overload fun(eventName: "onPlayerDemoted", identifier: any, func: fun(source: Player, target: Player, reason: string))
---@overload fun(eventName: "onPlayerFirstJoined", identifier: any, func: fun(ply: Player, data: table): (table))
---@overload fun(eventName: "onPocketItemAdded", identifier: any, func: fun(ply: Player, ent: Entity, serialized: table))
---@overload fun(eventName: "onPocketItemDropped", identifier: any, func: fun())
---@overload fun(eventName: "onPocketItemRemoved", identifier: any, func: fun(ply: Player, item: number))
---@overload fun(eventName: "onPropertyTax", identifier: any, func: fun(ply: Player, tax: number, couldAfford: boolean))
---@overload fun(eventName: "onShipmentRemoved", identifier: any, func: fun(num: number, itemTable: table))
---@overload fun(eventName: "onVehicleRemoved", identifier: any, func: fun(num: number, itemTable: table))
---@overload fun(eventName: "onVoteStarted", identifier: any, func: fun(vote: table))
---@overload fun(eventName: "playerAdverted", identifier: any, func: fun(player: Player, arguments: string, entity: Entity))
---@overload fun(eventName: "playerAFKDemoted", identifier: any, func: fun(ply: Player): (boolean, number, boolean, string))
---@overload fun(eventName: "playerArrested", identifier: any, func: fun(criminal: Player, time: number, actor: Player))
---@overload fun(eventName: "playerBoughtAmmo", identifier: any, func: fun(ply: Player, ammoTable: table, ent: Weapon, price: number))
---@overload fun(eventName: "playerBoughtCustomEntity", identifier: any, func: fun(ply: Player, entityTable: table, ent: Entity, price: number))
---@overload fun(eventName: "playerBoughtCustomVehicle", identifier: any, func: fun(ply: Player, vehicleTable: table, ent: Entity, price: number))
---@overload fun(eventName: "playerBoughtDoor", identifier: any, func: fun(ply: Player, ent: Entity, cost: number))
---@overload fun(eventName: "playerBoughtFood", identifier: any, func: fun(ply: Player, food: table, spawnedfood: Entity, cost: number))
---@overload fun(eventName: "playerBoughtPistol", identifier: any, func: fun(ply: Player, weaponTable: table, ent: Weapon, price: number))
---@overload fun(eventName: "playerBoughtShipment", identifier: any, func: fun(ply: Player, shipmentTable: table, ent: Entity, price: number))
---@overload fun(eventName: "playerBoughtVehicle", identifier: any, func: fun(ply: Player, ent: Entity, cost: number))
---@overload fun(eventName: "playerBuyDoor", identifier: any, func: fun(ply: Player, ent: Entity): (boolean, string, boolean))
---@overload fun(eventName: "playerBuyVehicle", identifier: any, func: fun(ply: Player, ent: Entity): (boolean, string, boolean))
---@overload fun(eventName: "playerCanChangeTeam", identifier: any, func: fun(ply: Player, team: number, force: boolean): (boolean, string))
---@overload fun(eventName: "PlayerCanPickupWeapon", identifier: any, func: fun(ply: Player, weapon: Weapon): (boolean))
---@overload fun(eventName: "playerClassVarsApplied", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "playerDroppedCheque", identifier: any, func: fun(player: Player, player: Player, amount: number, entity: Entity))
---@overload fun(eventName: "playerDroppedMoney", identifier: any, func: fun(player: Player, amount: number, entity: Entity))
---@overload fun(eventName: "playerEnteredLottery", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "playerGaveMoney", identifier: any, func: fun(player: Player, otherPlayer: Player, amount: number))
---@overload fun(eventName: "playerGetSalary", identifier: any, func: fun(ply: Player, amount: number): (boolean, string, number))
---@overload fun(eventName: "playerGotLicense", identifier: any, func: fun(target: Player, actor: Player))
---@overload fun(eventName: "playerKeysSold", identifier: any, func: fun(ply: Player, ent: Entity, GiveMoneyBack: number))
---@overload fun(eventName: "playerPickedUpCheque", identifier: any, func: fun(player: Player, player: Player, amount: number, success: bool, entity: Entity))
---@overload fun(eventName: "playerPickedUpMoney", identifier: any, func: fun(player: Player, amount: number, entity: Entity))
---@overload fun(eventName: "PlayerPickupDarkRPWeapon", identifier: any, func: fun(ply: Player, spawned_weapon: Entity, real_weapon: Weapon): (boolean))
---@overload fun(eventName: "playerSellDoor", identifier: any, func: fun(ply: Player, ent: Entity): (boolean, string))
---@overload fun(eventName: "playerSellVehicle", identifier: any, func: fun(ply: Player, ent: Entity): (boolean, string))
---@overload fun(eventName: "playerSetAFK", identifier: any, func: fun(ply: Player, afk: boolean))
---@overload fun(eventName: "playerStarved", identifier: any, func: fun(ply: Player))
---@overload fun(eventName: "playerToreUpCheque", identifier: any, func: fun(player: Player, player: Player, amount: number, entity: Entity))
---@overload fun(eventName: "playerUnArrested", identifier: any, func: fun(criminal: Player, actor: Player))
---@overload fun(eventName: "playerUnWanted", identifier: any, func: fun(excriminal: Player, actor: Player): (boolean))
---@overload fun(eventName: "playerUnWarranted", identifier: any, func: fun(excriminal: Player, actor: Player): (boolean))
---@overload fun(eventName: "playerWalletChanged", identifier: any, func: fun(ply: Player, amount: number, wallet: number): (number))
---@overload fun(eventName: "playerWanted", identifier: any, func: fun(criminal: Player, actor: Player, reason: string): (boolean))
---@overload fun(eventName: "playerWarranted", identifier: any, func: fun(criminal: Player, actor: Player, reason: string): (boolean))
---@overload fun(eventName: "playerWeaponsChecked", identifier: any, func: fun(checker: Player, target: Player, weapons: table))
---@overload fun(eventName: "playerWeaponsConfiscated", identifier: any, func: fun(checker: Player, target: Player, weapons: table))
---@overload fun(eventName: "playerWeaponsReturned", identifier: any, func: fun(checker: Player, target: Player, weapons: table))
---@overload fun(eventName: "postLoadCustomDarkRPItems", identifier: any, func: fun())
---@overload fun(eventName: "PostPlayerSay", identifier: any, func: fun(ply: Player, text: string, teamonly: boolean, dead: boolean))
---@overload fun(eventName: "removeLaw", identifier: any, func: fun(index: number, law: string, player: Player))
---@overload fun(eventName: "resetLaws", identifier: any, func: fun(player: Player))
---@overload fun(eventName: "teamChanged", identifier: any, func: fun(before: number, after: number))
---@overload fun(eventName: "UpdatePlayerSpeed", identifier: any, func: fun(ply: Player))
function hook.Add(eventName, identifier, func) end